#!/bin/bash

echo "üê≥ Iniciando VideoAI no Docker com Health Checks..."

# Fun√ß√£o para parar todos os processos em caso de interrup√ß√£o
cleanup() {
    echo "üõë Parando todos os processos..."
    kill $AUDIO_WORKER_PID $VIDEO_WORKER_PID $APP_PID 2>/dev/null
    exit 0
}

# Capturar sinais para limpeza
trap cleanup SIGINT SIGTERM

# Fun√ß√£o para aguardar RabbitMQ estar pronto
wait_for_rabbitmq() {
    echo "‚è≥ Aguardando RabbitMQ estar pronto..."
    
    local rabbitmq_host="${RABBITMQ_HOST:-rabbitmq}"
    local rabbitmq_port="${RABBITMQ_PORT:-5672}"
    local rabbitmq_user="${RABBITMQ_USER:-admin}"
    local rabbitmq_pass="${RABBITMQ_PASS:-admin123}"
    
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        echo "üîÑ Tentativa $attempt/$max_attempts de conex√£o com RabbitMQ..."
        
        # Tentar conectar usando Python
        python3 -c "
import socket
import sys

try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(2)
    result = s.connect_ex(('$rabbitmq_host', $rabbitmq_port))
    s.close()
    sys.exit(0 if result == 0 else 1)
except Exception:
    sys.exit(1)
" 2>/dev/null
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ RabbitMQ est√° respondendo na porta $rabbitmq_port"
            
            # Aguardar mais alguns segundos para garantir que o RabbitMQ est√° totalmente inicializado
            echo "‚è≥ Aguardando inicializa√ß√£o completa do RabbitMQ..."
            sleep 5
            return 0
        fi
        
        echo "‚ùå RabbitMQ n√£o est√° pronto ainda. Aguardando 2 segundos..."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    echo "üö® RabbitMQ n√£o ficou pronto ap√≥s $max_attempts tentativas"
    return 1
}

# Fun√ß√£o para aguardar Redis estar pronto
wait_for_redis() {
    echo "‚è≥ Aguardando Redis estar pronto..."
    
    local redis_host="${REDIS_HOST:-redis}"
    local redis_port="${REDIS_PORT:-6379}"
    local max_attempts=15
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        echo "üîÑ Tentativa $attempt/$max_attempts de conex√£o com Redis..."
        
        python3 -c "
import socket
import sys

try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(1)
    result = s.connect_ex(('$redis_host', $redis_port))
    s.close()
    sys.exit(0 if result == 0 else 1)
except Exception:
    sys.exit(1)
" 2>/dev/null
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ Redis est√° respondendo na porta $redis_port"
            return 0
        fi
        
        echo "‚ùå Redis n√£o est√° pronto ainda. Aguardando 2 segundos..."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    echo "üö® Redis n√£o ficou pronto ap√≥s $max_attempts tentativas"
    return 1
}

# Aguardar depend√™ncias estarem prontas
wait_for_redis
if [ $? -ne 0 ]; then
    echo "üö® Falha ao conectar com Redis. Abortando..."
    exit 1
fi

wait_for_rabbitmq
if [ $? -ne 0 ]; then
    echo "üö® Falha ao conectar com RabbitMQ. Abortando..."
    exit 1
fi

# Aguardar mais um pouco para garantir estabilidade
echo "‚è≥ Aguardando estabiliza√ß√£o dos servi√ßos..."
sleep 3

# Iniciar worker de √°udio
echo "üéµ Iniciando worker de √°udio..."
python3 worker.py &
AUDIO_WORKER_PID=$!

# Aguardar um pouco antes de iniciar o pr√≥ximo worker
sleep 3

# Iniciar worker de v√≠deo
echo "üé• Iniciando worker de v√≠deo..."
python3 video_worker.py &
VIDEO_WORKER_PID=$!

# Aguardar um pouco antes de iniciar a aplica√ß√£o
sleep 3

# Iniciar aplica√ß√£o principal
echo "üöÄ Iniciando aplica√ß√£o principal..."
if [ "$1" = "dev" ]; then
    # Modo desenvolvimento
    python3 app.py &
    APP_PID=$!
else
    # Modo produ√ß√£o com gunicorn
    gunicorn app:app --bind 0.0.0.0:5000 --timeout 300 --workers 2 &
    APP_PID=$!
fi

echo "‚úÖ Todos os processos iniciados:"
echo "   - Worker de √°udio (PID: $AUDIO_WORKER_PID)"
echo "   - Worker de v√≠deo (PID: $VIDEO_WORKER_PID)"
echo "   - Aplica√ß√£o principal (PID: $APP_PID)"
echo "   - VideoAI rodando em http://localhost:5000"

# Aguardar todos os processos
wait $AUDIO_WORKER_PID $VIDEO_WORKER_PID $APP_PID 